1.区间dp和记忆化搜索的区别在于:
区间dp永远都是从最小的问题求解开始,用状态转移方程去转移下一个状态,进而求解出大的问题,依次类推最终
求解出题目要求的规模的问题解.
而记忆化化搜索,是对于题目要求解的问题先做出一种大的决策,这种大的决策就是将这个大的问题不断划分为小
的问题,对于每个问题都这样划分成小问题,知道最小子问题开始回溯返回,再度划分更新最优解.基本是分治思维
的一种体现.

2.为什么记忆化搜索会产生重叠子问题呢,因为本身就是采取分治将大问题转化为小问题,然而在不断分解的过程中,
不同的大问题所分解的小问题有一部分是相同的,这是应用递归分治这种思维所不可避免的,所以要采用记忆化搜索
去除重叠子问题,避免重复遍历.
而dp不会产生重叠的区间是因为我们的思路本身就是从最小的状态去递推合并小区间为大区间的,在这个过程中
每次得到的大区间都是新的状态,我们可通过枚举区间的长度或左右端点来保证每求解的区间都是全新的,因此
在dp的过程中 本着小状态到大状态的转移本身就不会产生重复的区间,都是新区间,因此没有重叠子问题.

3.石子合并这个问题 可以问你 不相邻的取法,最小花费 可用贪心(每次都取最小的两个堆合并) 哈夫曼树求解.
在满足必须相邻堆合并,可以链状摆放(dp n=100) 环状摆放(扩展2n dp n=100),当n=1000时需要采用四边形不等
式优化dp，当n=40000时需要用GarsiaWachs算法.

4.这些问题要么使用传统暴力严重超时,要么就是根本无法用传统的暴力解决,必须从子状态转移大状态直到目标
态,才能解决.

5.区间DP的子问题之间它存在着相邻选取的这种约束,只有这样才存在着区间DP分割合并的说明.

6.区间dp 区间的总长度一般为 100~300,这种存在第三层枚举分割点k分割区间求取最优解,也有可能长度为2000~3000,
这种一般只有两层枚举区间长度和起始点,没有枚举分割点k的循环。

7.状态转移实际上可以理解成剪枝,当前状态的选取 会摒弃之前不好的子状态而今选取最优子状态作为当前状态的转移
而剪枝是对于某些对某些路径求取 已经不可能更新最优值,这条路径就可以摒弃.

8.区间dp的记忆化搜索分治法会产生重叠子问题,而归并排序和快排的二分分治是不会产生重叠子问题的.
其实也正是由于会产生重叠子问题我们才会去应用动态规划的,因为动态规划在设计状态标记数组时,就是
考虑了分解子问题所会产生的重叠子问题,而且一般重叠子问题重复率越高,应用动态规划解决它的效率也
就越好.但是对于树形dp,因为树上 分解子问题是分解为不同的子树分支,而树上不同的分支必然是不会产生
重复元素的,所以树形dp不会产生重叠子问题,我们只是应用子节点想祖父节点回溯进行状态转移,抽象出
树形dp这一概念.

9.斐波那契数的递归树 能很清晰地展示出 dp不可避免的重叠子问题.
10
动态规划的三个要点:
(1).最优子结构
最优子结构指的是，问题的最优解包含子问题的最优解。反过来说就是，我们可以通过子问题的最优解，
推导出问题的最优解。如果我们把最优子结构，对应到我们前面定义的动态规划问题模型上，
那我们也可以理解为，后面阶段的状态可以通过前面状态推导出来。
(2).无后效性
无后效性，有两层含义，第一层含义是，在推导后面阶段状态的时候，我们只关心前面阶段的状态值，
不关心这个状态是怎么一步步推导出来的。第二层含义是，某阶段状态一旦确定，
就不受之后阶段的决策影响。无后效性是一个非常“宽松”的要求。
只要满足前面提到的动态规划问题模型，其实基本上都会满足无后效性。
(3).重复子问题
这个概念，前面一节，已经多次提到。用一句话概括就是： 不同的决策序列，
到达某个相同的阶段时，可能会产生重复的状态。

11.最优子结构:
整个问题最优解 包含子问题最优解,依据子问题最优解构造整个问题最优解,这样才能
构造递推式(状态转移方程式)求解该问题.

