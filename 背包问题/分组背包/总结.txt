分组背包不能用滚动数组优化成一维的原因多半是存在组内物品体积
不为0,导致上一状态需要表示为dp[j-0],而这个dp[j-0]前面的组内物品
已经转移过,dp[j]所表示的已经不是前i-1组的状态,而是已经放入第i组
物品的,前i组的状态了.

当然有可能物品体积为0,但如果能保证体积为0的物品第一个枚举,这样也是可以
用一维的滚动数组优化的,
例题如CF 946D Timetable dp[i][j]代表前i天翘j门课最大能节省的时间做法 实际滚动数组可以优化一维空间dp[j]

但是有些状态表示如果是取最小值,而存在背包容量为0的情况,也不能用滚动数组优化,
因为一维dp[0]初始状态为0,无法累加值,因此必须用二维dp[i][j],dp[0][0..v]=0,
其余dp[i][j]初始化INF(0x3f3f3f3f),这样转移dp[i][j]=min(dp[i][j],dp[i-1][j-k]+val[i][k]);
j=0,k=0时
dp[i][0]=min(dp[i][0],dp[i-1][0-0]+val[i][0]); 成立
例题如CF 946D Timetable dp[i][j]代表前i填翘j门课最少的上课时间做法 不能用滚动数组优化